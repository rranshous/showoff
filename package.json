{
  "name": "showoff",
  "displayName": "ShowOff - Visual Copilot Canvas",
  "description": "Gives Copilot a visual canvas to draw and collaborate",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.90.0"
  },
  "categories": ["Other"],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "views": {
      "showoff-sidebar": [
        {
          "type": "webview",
          "id": "showoff.canvasView",
          "name": "Canvas",
          "icon": "$(symbol-color)"
        }
      ],
      "virtualscreens-sidebar": [
        {
          "type": "webview",
          "id": "virtualscreens.screensView",
          "name": "Virtual Screens",
          "icon": "$(device-desktop)"
        }
      ],
      "windowmanager-sidebar": [
        {
          "type": "webview",
          "id": "windowmanager.managerView",
          "name": "Window Manager",
          "icon": "$(window)"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "showoff-sidebar",
          "title": "ShowOff Canvas",
          "icon": "$(symbol-color)"
        },
        {
          "id": "virtualscreens-sidebar",
          "title": "Virtual Screens",
          "icon": "$(device-desktop)"
        },
        {
          "id": "windowmanager-sidebar",
          "title": "Window Manager",
          "icon": "$(window)"
        }
      ]
    },
    "commands": [
      {
        "command": "showoff.showCanvas",
        "title": "Show Canvas"
      }
    ],
    "languageModelTools": [
      {
        "name": "draw_canvas",
        "displayName": "ShowOff Canvas Drawing Tool",
        "modelDescription": "Draw on the ShowOff visual canvas using JavaScript with powerful animation libraries. The canvas fills the entire panel and automatically resizes.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "draw_canvas",
        "icon": "$(symbol-color)",
        "userDescription": "Draw visualizations on the ShowOff canvas using JavaScript code",
        "inputSchema": {
          "type": "object",
          "properties": {
            "jsFunction": {
              "type": "string",
              "description": "JavaScript code to execute in the canvas context. Provide ONLY the function body code, NOT a named function declaration. Available: HTML5 Canvas API (ctx, canvas), GSAP animation library with plugins (gsap, MotionPathPlugin, Draggable), and PIXI.js renderer (PIXI - NOTE: WebGL not supported in VS Code browser, use Canvas fallback). ALWAYS USE GSAP FOR ANIMATIONS - avoid manual requestAnimationFrame loops. For complex motion: use MotionPathPlugin. For user interaction: use Draggable. Recommended pattern: GSAP animates properties, onUpdate renders to canvas/PIXI. Examples: Canvas Animation: 'gsap.to(ball, {x:200, duration:2, onUpdate:()=>{ctx.clearRect(0,0,canvas.width,canvas.height); ctx.arc(ball.x,ball.y,20,0,Math.PI*2); ctx.fill();}});' | Motion Path: 'gsap.to(obj, {motionPath: {path: \"M10,10 Q100,50 200,10\"}, onUpdate: render});' | Draggable: 'Draggable.create(element, {onDrag: updateCanvas});' | PIXI Canvas: 'const app=new PIXI.Application({view:canvas, forceCanvas:true}); gsap.to(sprite, {x:100, onUpdate:()=>app.render()});'"
            }
          },
          "required": ["jsFunction"]
        }
      },
      {
        "name": "manage_virtual_screens",
        "displayName": "Virtual Screens Management Tool",
        "modelDescription": "Manage multiple virtual screens for displaying text content or drawing visualizations. Each screen has a unique ID (1, 2, 3, etc.) and supports two types: 'text' screens for displaying information, lists, code snippets, or any textual data, and 'canvas' screens for creating drawings, charts, diagrams using JavaScript, HTML5 Canvas API, GSAP animations, and PIXI.js WebGL rendering. Screens can be created, updated, read, or cleared independently and are persistent until modified. Use this to organize information across multiple screens for better user experience.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "virtual_screens",
        "icon": "$(device-desktop)",
        "userDescription": "Manage multiple virtual screens for text content and canvas drawings",
        "inputSchema": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": ["create", "update", "clear", "read", "list"],
              "description": "Action to perform: 'create' to make a new screen, 'update' to modify existing screen content, 'clear' to remove a screen, 'read' to get current screen content, 'list' to get details of all current screens"
            },
            "screenId": {
              "type": "number",
              "description": "Numeric ID of the screen to manage (1, 2, 3, etc.). Use consistent IDs to reference the same screen across operations. Not required for 'list' action."
            },
            "screenType": {
              "type": "string",
              "enum": ["text", "canvas"],
              "description": "Type of screen: 'text' for text content or 'canvas' for drawing. Required when creating new screens."
            },
            "content": {
              "type": "string",
              "description": "For text screens: text content to display with markdown formatting support (headers, bold, italic, code, lists, links). For canvas screens: JavaScript code to execute in canvas context with GSAP and PIXI.js support - provide ONLY function body code (e.g., 'ctx.fillStyle = \"blue\"; ctx.fillRect(10, 10, 100, 50);'). Available: HTML5 Canvas API (ctx, canvas), GSAP animation library with plugins (gsap, MotionPathPlugin, Draggable), and PIXI.js renderer (PIXI - NOTE: WebGL not supported in VS Code browser, use forceCanvas:true). PREFER GSAP for animations with onUpdate callbacks. Examples: 'gsap.to(obj, {x:100, onUpdate:()=>redraw()});' | 'const app=new PIXI.Application({view:canvas, forceCanvas:true});'. Leave empty or omit for 'clear' action."
            },
            "title": {
              "type": "string",
              "description": "Optional title for the screen when creating new screens. If not provided, defaults to 'Screen #X'"
            }
          },
          "required": ["action"]
        }
      },
      {
        "name": "manage_window_system",
        "displayName": "Window Manager System Tool",
        "modelDescription": "Manage a sophisticated window system with grid-based layouts and JavaScript Window Controller Agents (WCAs). Create, update, and destroy windows with custom positioning, sizes, and behavior. Deploy Window Controller Agents - JavaScript code that controls window content, title, and rendering. Supports multiple window types: canvas, markup, html, custom. Each window has grid coordinates (row, col, rowSpan, colSpan) for precise positioning. Layout management with configurable grid dimensions. Query system state and window information.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "window_system",
        "icon": "$(window)",
        "userDescription": "Manage windows, layouts, and deploy JavaScript Window Controller Agents",
        "inputSchema": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": ["create", "update", "destroy", "layout", "query", "communicate"],
              "description": "Action to perform: 'layout' to set grid dimensions, 'create' to make new window, 'update' to modify existing window, 'destroy' to remove window, 'query' to get window/layout info, 'communicate' for future WCA interaction"
            },
            "windowId": {
              "type": "string",
              "description": "Unique identifier for the window (e.g., 'main', 'sidebar', 'chart1'). Required for create, update, destroy, query actions on specific windows."
            },
            "windowTitle": {
              "type": "string",
              "description": "Display title for the window header. Required for create action, optional for update."
            },
            "windowType": {
              "type": "string",
              "enum": ["canvas", "markup", "html", "custom"],
              "description": "Window content type: 'canvas' for HTML5 canvas with drawing, 'markup' for text/markdown content, 'html' for custom HTML, 'custom' for controller-managed content. Required for create action."
            },
            "gridPosition": {
              "type": "object",
              "properties": {
                "row": {"type": "number", "description": "Grid row position (0-based)"},
                "col": {"type": "number", "description": "Grid column position (0-based)"},
                "rowSpan": {"type": "number", "description": "Number of rows to span (default 1)"},
                "colSpan": {"type": "number", "description": "Number of columns to span (default 1)"}
              },
              "required": ["row", "col"],
              "description": "Window position and size in grid coordinates. Required for create action."
            },
            "controllerCode": {
              "type": "string",
              "description": "JavaScript Window Controller Agent (WCA) code to control window behavior. Gets access to windowId, windowElement, contentElement, canvasElement (if canvas type), setTitle(), setContent() functions. Example: 'setTitle(\"Dynamic Title\"); setContent(\"<h1>Hello</h1>\"); if(canvasElement) { const ctx = canvasElement.getContext(\"2d\"); ctx.fillRect(0,0,100,100); }'. Use for dynamic content updates, animations, interactions."
            },
            "content": {
              "type": "string",
              "description": "Static content for the window (markup/html types). For dynamic content, use controllerCode instead. HTML with JS events requires custom type."
            },
            "layoutConfig": {
              "type": "object",
              "properties": {
                "gridColumns": {"type": "number", "description": "Number of columns in the grid"},
                "gridRows": {"type": "number", "description": "Number of rows in the grid"}
              },
              "required": ["gridColumns", "gridRows"],
              "description": "Grid layout configuration. Required for layout action."
            },
            "communicationData": {
              "description": "Data for future WCA communication features"
            }
          },
          "required": ["action"]
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./"
  },
  "devDependencies": {
    "@types/vscode": "^1.90.0",
    "@types/node": "16.x",
    "typescript": "^4.9.4"
  }
}