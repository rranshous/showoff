{
  "name": "showoff",
  "displayName": "ShowOff - Visual Copilot Canvas",
  "description": "Gives Copilot a visual canvas to draw and collaborate",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.90.0"
  },
  "categories": ["Other"],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "views": {
      "showoff-sidebar": [
        {
          "type": "webview",
          "id": "showoff.canvasView",
          "name": "Canvas",
          "icon": "$(symbol-color)"
        }
      ],
      "virtualscreens-sidebar": [
        {
          "type": "webview",
          "id": "virtualscreens.screensView",
          "name": "Virtual Screens",
          "icon": "$(device-desktop)"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "showoff-sidebar",
          "title": "ShowOff Canvas",
          "icon": "$(symbol-color)"
        },
        {
          "id": "virtualscreens-sidebar",
          "title": "Virtual Screens",
          "icon": "$(device-desktop)"
        }
      ]
    },
    "commands": [
      {
        "command": "showoff.showCanvas",
        "title": "Show Canvas"
      }
    ],
    "languageModelTools": [
      {
        "name": "draw_canvas",
        "displayName": "ShowOff Canvas Drawing Tool",
        "modelDescription": "Draw on the ShowOff visual canvas using JavaScript. The canvas fills the entire panel and automatically resizes to match the available space. Takes JavaScript code as a string that will be executed in the canvas context. Provide ONLY the function body code (not a named function declaration). The code should use standard HTML5 Canvas API methods like ctx.fillRect(), ctx.strokeRect(), ctx.fillText(), ctx.arc(), etc. Canvas context is available as 'ctx' and canvas object as 'canvas'. Canvas dimensions are available via canvas.width and canvas.height properties.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "draw_canvas",
        "icon": "$(symbol-color)",
        "userDescription": "Draw visualizations on the ShowOff canvas using JavaScript code",
        "inputSchema": {
          "type": "object",
          "properties": {
            "jsFunction": {
              "type": "string",
              "description": "JavaScript code to execute in the canvas context. Provide ONLY the function body code, NOT a named function declaration. Example: 'ctx.fillStyle = \"red\"; ctx.fillRect(10, 10, 100, 50);' NOT 'function draw() { ... }'. The canvas context 'ctx' and canvas object 'canvas' are automatically available. Use standard HTML5 Canvas API methods. The canvas is persistent and fills the entire panel."
            }
          },
          "required": ["jsFunction"]
        }
      },
      {
        "name": "manage_virtual_screens",
        "displayName": "Virtual Screens Management Tool",
        "modelDescription": "Manage multiple virtual screens for displaying text content, information, lists, code snippets, or any textual data. Each screen is identified by a unique ID (1, 2, 3, etc.) and can be created, updated, or cleared independently. Virtual screens are persistent and remain visible until updated. Use this tool to organize information across multiple screens for better user experience.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "virtual_screens",
        "icon": "$(device-desktop)",
        "userDescription": "Manage multiple virtual text screens for organized information display",
        "inputSchema": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": ["update", "create", "clear"],
              "description": "Action to perform: 'update' to modify existing screen content, 'create' to make a new screen, 'clear' to empty a screen"
            },
            "screenId": {
              "type": "number",
              "description": "Numeric ID of the screen to manage (1, 2, 3, etc.). Use consistent IDs to reference the same screen across operations."
            },
            "screenType": {
              "type": "string",
              "enum": ["text", "canvas"],
              "description": "Type of screen: 'text' for text content or 'canvas' for drawing. Required when creating new screens."
            },
            "content": {
              "type": "string",
              "description": "For text screens: text content to display. For canvas screens: JavaScript code to execute (function body only, like draw_canvas tool). Leave empty or omit for 'clear' action."
            },
            "title": {
              "type": "string",
              "description": "Optional title for the screen when creating new screens. If not provided, defaults to 'Screen #X'"
            }
          },
          "required": ["action", "screenId"]
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./"
  },
  "devDependencies": {
    "@types/vscode": "^1.90.0",
    "@types/node": "16.x",
    "typescript": "^4.9.4"
  }
}